function getPDF(o) {

	var w = $(window).height()
	var he = "1343px", wi = "1300px", wii = 1300
	$("#prnt_pdf")
		.append( $(".aiplaneNameHeaderf").clone().removeClass("aiplaneNameHeaderf").css({"padding-top":"50px"}))
		.append( $("#section1-inner").clone().css({"margin-left":"300px",
				"align-items": "baseline","height": he,"width": wi, "justify-content": "start",
				"flex-direction": "row"}) )
		.append( $(".aiplaneNameHeaderf").clone().removeClass("aiplaneNameHeaderf"))
		.append( $("#section2-inner").clone().css({"margin-left":"300px",
				"align-items": "baseline","height": he,"width": wi, "justify-content": "start",
				"flex-direction": "row"}) )
		.append( $(".aiplaneNameHeaderf").clone().removeClass("aiplaneNameHeaderf"))
		.append( $("#section3-inner").clone().css("padding-left", "600px").css("align-items", "baseline").css("height", he).css("width", "1406px").css("justify-content", "start") )
		.append( $(".aiplaneNameHeaderf").clone().removeClass("aiplaneNameHeaderf"))
		.append( $("#section4-inner").clone().css(
			{"margin-left":"350px",
				"align-items": "baseline","height": he,"width": wi, "justify-content": "start",
				"flex-direction": "row"}
			) )
		.append( $(".aiplaneNameHeaderf").clone().removeClass("aiplaneNameHeaderf"))
	$(".section5-final").prepend( $("#prnt_pdf") )

	var t = $(".section5-final").width(),
		a = $(".section5-final").height(),
		s = t + 0, u = s + 0, _ = t, c = a, u = 1403, _ = wii, s = wii, t = wii,
		l = Math.ceil(a / u) - 1,
		e = new jsPDF("portrait", "pt", [s, u]),
		tt = 0;

	$(".table", $("#prnt_pdf")).each(function () {
		$(this).css("margin", "0 auto")
	})



	html2canvas($(".section5-final")[0], {
		allowTaint: !0,
		backgroundColor: "#2b2c3b"
	}).then(function (t) {
		t.getContext("2d");

		var a = t.toDataURL("image/png", 2)


		e.setFillColor("#2b2c3b"), e.rect(0, 0, s, u, "F"),
			e.addImage(a, "PNG", 0, 0, _, c);
		for (var i = 1; i <= l; i++) e.addPage([s, u]),
			e.addImage(a, "PNG", 0, -u * i + 0, _, c);

		if ("save" == o) e.save("SkyHandling.pdf"); else if ("blob" == o) {
			var n = e.output("blob"), r = URL.createObjectURL(n);
			window.open(r)
		}
		$("#prnt_pdf").empty()
	})



}

function changeChart(t, a) {
	if (null !== t) {
		var e = [];
		for (i = 0; i < a.length; i++) e.push(i);
		t.data.labels = e, t.data.datasets[0].data = a, t.update()
	}
}

function getAirplanes() {
	var t = [];
	return $("#initData input").each(function () {
		t.push(JSON.parse($(this).val()))
	}), t
}

function paramUpdate(t) {
	var a = $(t.target), e = {newValue: a.val(), type: a.data("type")};
	$.post("/changeParam", JSON.stringify(e)).done(function (t) {
		"ok" == t ? a.removeClass("error") : a.addClass("error")
	}).fail(function () {
		a.addClass("error")
	})
}

function number_format(t, a, e, i) {
	var n, r;
	return isNaN(a = Math.abs(a)) && (a = 2), null == e && (e = ","), null == i && (i = " "), 3 < (r = (n = parseInt(t = (+t || 0).toFixed(a)) + "").length) ? r %= 3 : r = 0, (r ? n.substr(0, r) + i : "") + n.substr(r).replace(/(\d{3})(?=\d)/g, "$1" + i) + (a ? e + Math.abs(t - n).toFixed(a).replace(/-/, 0).slice(2) : "")
}

function inputFocus(t) {
	$(t.target).val("")
}

$(document).ready(function () {
	$.ajaxSetup({headers: {"X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")}}), $(".hamburger").click(function () {
		$(this).toggleClass("is-active"), $(this).is(".is-active") ? $(this).siblings(".header__linkTo").addClass("active") : $(this).siblings(".header__linkTo").removeClass("active")
	});
	var n = $("#header .header__left"), a = $("#container");
	a.slick({arrows: !1, infinite: !1, swipe: !0, arrows: !1}), a.on("beforeChange", function (t, a, e, i) {
		n.find(".active").removeClass("active").end().find(".header__data-" + i).addClass("active")
	}), $(document).keydown(function (t) {
		switch (t.which) {
			case 37:
				a.slick("slickPrev");
				break;
			case 39:
				a.slick("slickNext");
				break;
			default:
				return
		}
		t.preventDefault()
	}), $(".header__linkToDB").click(function () {
		a.slick("slickGoTo", 0), $(this).removeClass("active").siblings(".hamburger").removeClass("is-active")
	}), $(".popup__close").click(function () {
		$("#overlay").hide()
	});
	var t = JSON.parse($("#params").val())[0];
	Vue.filter("numberFormat", number_format);
	var e = new Vue({
		el: "#tab1", data: {airplanes: getAirplanes(), isEditing: !1, selected: void 0}, methods: {
			tableEdit: function () {
				this.isEditing = !this.isEditing, this.selected = void 0
			}, inputChange: function (t) {
				var a = $(t.target),
					e = {id: a.parent().parent().data("index"), newValue: a.val(), type: a.data("type")};
				$.post("/changeInput", JSON.stringify(e)).done(function (t) {
					"ok" == t ? a.removeClass("error") : a.addClass("error")
				}).fail(function () {
					a.addClass("error")
				})
			}, inputFocus: inputFocus, addAirplane: function () {
				var a = this;
				$.post("/addAirplane", {}).done(function (t) {
					a.airplanes.push(JSON.parse(t))
				}).fail(function () {
				})
			}, removeAirplane: function () {
				if (void 0 !== this.selected) {
					var a = this;
					$.post("/removeAirplane", JSON.stringify({id: this.airplanes[a.selected].id})).done(function (t) {
						"ok" == t && (a.airplanes.splice(a.selected, 1), a.selected = void 0)
					}).fail(function () {
					})
				}
			}, setActive: function (t, a) {
				this.isEditing || $(a.target).is(".mainTable__arrow") || (this.selected === t ? this.selected = void 0 : this.selected = t)
			}, getScenaries: function (t) {
				var a = $(t.target);
				// console.log(a,a.data("index"));
				$("#overlay").show().find(".popup__scenario").each(function () {
					$(this).data("index", a.data("index"))
				})
			}
		}
	}),
		 o = new Vue({
		el: ".section-1",
		data: {
			a: e.airplanes[0],
			credit: false,
			cr_first: 25,
			cr_srok: 1,
			cr_size: 75,
			cr_percent:1,
      cr_comission:1,
			cr_price: 0,
			cours_USD:28,
			cours_EUR:30,
			currentYear: (new Date).getFullYear()},
			methods: {},
			mounted(){
				this.cours_USD = parseFloat($('#curs-USD').val());
				this.cours_EUR = parseFloat($('#curs-EUR').val());
				this.cr_price = this.a.price;
				console.log(this.a,e,this.a.price);
			},
			watch:{
				cr_first: function (val) {
					this.cr_first=val;
					this.cr_size = 100 - this.cr_first;
				},
				cr_size: function (val) {
					this.cr_size=val;
					this.cr_first = 100 - this.cr_size;
				},
			},
			computed: {
				max_expluatation_year: function () {
					return parseInt(this.a.year) + parseInt(this.a.avr_years_service)
				},
				posible_expluatation: function () {
					return this.max_expluatation_year - this.currentYear + 1
				}, fuel_consum_hour: function () {
					return 100 * this.a.fuel_weight / this.a.practical_range
				}, fuel_consum_km: function () {
					return this.a.normal_cruising_speed * this.a.fuel_weight / this.a.practical_range
				},
				airplanes: function () {
					return e.airplanes
				},
				pay_kvartal: function () {
					var year_pay = this.pay_sum/this.cr_srok;
					return year_pay/4;
				},
				pay_kvartal_EUR: function () {
					var year_pay = this.pay_sum_EUR/this.cr_srok;
					return year_pay/4;
				},
				pay_sum: function () {
					var percent = this.cr_percent * this.pay_telo/100 * this.cr_srok;
					var summ = this.pay_telo+percent;
          if (summ > 0) {
            this.a.price = summ + this.cr_price / 100 * this.cr_first + this.cr_comission;
            summ += this.cr_comission;
          } else {
            this.a.price = this.cr_price
          }
					return summ;
				},

				pay_sum_EUR: function () {
          return this.pay_sum*this.cours_USD/this.cours_EUR;
				},

				pay_telo: function () {
					console.log(this.cr_size,this.cr_price,this.a.price);
					var telo = this.cr_size*this.cr_price/100;
					return telo;
				},
				pay_telo_EUR: function () {
					return this.pay_telo*this.cours_USD/this.cours_EUR;
				},

				isCorrectCrSize: function () {
					return parseInt(this.cr_size) > 75;
				},
				isCorrectCrFirst: function () {
					return parseInt(this.cr_first) < 25;
				},
				isCorrectCrPercent: function () {
					return parseFloat(this.cr_precent) < 100;
				}
		}
	});
	$(".popup__scenario").click(function (event) {
		o.a = e.airplanes[$(this).data("index")], $("#overlay").hide(), a.slick("slickNext");
		$targetID = $(this).attr('data-index');
		if($targetID==2){
			o.credit=true;
			o.cr_price=o.a.price
		}
		$(".aiplaneNameHeader:not(:first)").each(function () {
			$(this).html("Выбран самолет: "+o.a.name);

		})	});
	var s = new Vue({
		el: ".tableLifetime",
		data: {lifetime: t.lifetime},
		methods: {inputChange: paramUpdate},
		computed: {
			isCorrectExpluatation: function () {
				return this.lifetime > o.a.avr_years_service
			}, end_expluatation_year: function () {
				return parseInt(o.currentYear) + parseInt(this.lifetime)
			}
		}
	}), r = new Vue({
		el: "#flyingHoursPerMonth",
		data: {flying_hours_per_month: t.flying_hours},
		methods: {inputChange: paramUpdate}
	}), u = new Vue({
		el: ".tableDepreciationDynamics",
		data: {depreciation_percentage: t.depreciation_percentage, depreciation_period: t.depreciation_period},
		computed: {
			end_effective_year: function () {
				return o.a.year + parseInt(this.depreciation_period)
			}, effect_per_year: function () {
				return (100 - parseInt(this.depreciation_percentage)) / (o.a.avr_years_service - parseInt(this.depreciation_period))
			}, max_effect_per_year: function () {
				return parseInt(this.depreciation_percentage) / parseInt(this.depreciation_period)
			}, amount_of_capital_costs: function () {
				var t = o.a.price, a = t / 100 * this.max_effect_per_year, e = t / 100 * this.effect_per_year,
					n = parseInt(o.currentYear) + parseInt(s.lifetime),
					r = o.max_expluatation_year <= n ? o.max_expluatation_year : n;
				for (i = o.currentYear + 1; i <= r; i++) {
					t -= i <= this.end_effective_year ? a : e
				}
				return o.a.price - t
			}
		},
		methods: {inputChange: paramUpdate, inputFocus: inputFocus}
	}), _ = new Vue({
		el: ".section-3",
		data: {
			salary_leader1: t.salary_leader1,
			salary_leader2: t.salary_leader2,
			salary_pilot2: t.salary_pilot2,
			salary_conductor: t.salary_conductor,
			salary_engineer: t.salary_engineer,
			insurance_responsibility: t.insurance_responsibility,
			insurance_crew: t.insurance_crew,
			insurance_kasko: t.insurance_kasko,
			insurance_franchise: t.insurance_franchise,
			insurance_aircraft_service: t.insurance_aircraft_service,
			nav_aeronautical_charts: t.nav_aeronautical_charts,
			nav_airworthiness: t.nav_airworthiness,
			nav_planning_program: t.nav_planning_program,
			nav_communication: t.nav_communication,
			nav_management: t.nav_management,
			nav_daily_travel_accommodation: t.nav_daily_travel_accommodation,
			nav_crue_training: t.nav_crue_training,
			nav_crue_training2: t.nav_crue_training2
		},
		computed: {
			salarySum: function () {
				return parseFloat(this.salary_leader1) + parseFloat(this.salary_leader2) + parseFloat(this.salary_pilot2) + parseFloat(this.salary_conductor) + parseFloat(this.salary_engineer)
			}, insuranceSum: function () {
				return parseFloat(this.insurance_responsibility) + parseFloat(this.insurance_crew) + parseFloat(this.insurance_kasko) + parseFloat(this.insurance_franchise) + parseFloat(this.insurance_aircraft_service)
			}, navSum: function () {
				return parseFloat(this.nav_aeronautical_charts) + parseFloat(this.nav_airworthiness) + parseFloat(this.nav_planning_program) + parseFloat(this.nav_communication) + parseFloat(this.nav_management) + parseFloat(this.nav_daily_travel_accommodation) + parseFloat(this.nav_crue_training) + parseFloat(this.nav_crue_training2)
			}, flying_hours_per_month: function () {
				return r.flying_hours_per_month
			}, grate_total_year: function () {
				return 12 * this.salarySum + this.insuranceSum + 12 * this.navSum
			}
		},
		methods: {inputChange: paramUpdate, inputFocus: inputFocus}
	}), c = new Vue({
		el: ".section-4",
		data: {
			route_distance: t.route_distance,
			airport_services_cost: t.airport_services_cost,
			fuel_cost: t.fuel_cost,
			engine_hour_price: t.engine_hour_price,
			avionics_hour_price: t.avionics_hour_price,
			glider_hour_price: t.glider_hour_price,
			duration_warm_up: t.duration_warm_up,
			duration_take_off: t.duration_take_off
		},
		methods: {inputChange: paramUpdate, inputFocus: inputFocus},
		computed: {
			aeroNavigation_R: function () {
				return 7.56 * o.a.mtow / 100
			}, aeroNavigation_r: function () {
				return 45.56 * this.route_distance * Math.sqrt(o.a.mtow / 1e3 / 50) / 100
			}, aeroNavigation_summ: function () {
				return this.aeroNavigation_R + this.aeroNavigation_r
			}, engine_load_summ: function () {
				return (this.warm_up_nav * this.duration_warm_up + this.take_off * this.duration_take_off + this.cruise * this.duration_cruise + this.landing * this.duration_landing) / this.duration_summ
			}, duration_cruise: function () {
				return 60 * this.route_distance / this.normal_cruising_speed
			}, duration_landing: function () {
				return 60 <= this.duration_cruise ? 20 : 10
			}, duration_summ: function () {
				return parseFloat(this.duration_warm_up) + parseFloat(this.duration_take_off) + parseFloat(this.duration_cruise) + parseFloat(this.duration_landing)
			}, fuel_need_warm_up: function () {
				return this.fuel_consum_km * this.warm_up_nav * this.duration_warm_up / 60 / 100
			}, fuel_need_take_off: function () {
				return this.fuel_consum_km * this.take_off * this.duration_take_off / 60 / 100
			}, fuel_need_cruise: function () {
				return this.fuel_consum_km * this.cruise * this.duration_cruise / 60 / 100
			}, fuel_need_landing: function () {
				return this.fuel_consum_km * this.landing * this.duration_landing / 60 / 100
			}, fuel_need_summ: function () {
				return parseFloat(this.fuel_need_warm_up) + parseFloat(this.fuel_need_take_off) + parseFloat(this.fuel_need_cruise) + parseFloat(this.fuel_need_landing)
			}, utilization_programm: function () {
				return (parseFloat(this.engine_hour_price) + parseFloat(this.avionics_hour_price) + parseFloat(this.glider_hour_price)) / 60 * this.duration_summ
			}, flight_cost: function () {
				return this.aeroNavigation_summ + this.fuel_need_summ * this.fuel_cost + parseFloat(this.airport_services_cost) + this.utilization_programm
			}, flight_hour_cost: function () {
				return 60 * this.flight_cost / this.duration_summ
			}, warm_up_nav: function () {
				return o.a.warm_up_nav
			}, take_off: function () {
				return o.a.take_off
			}, cruise: function () {
				return o.a.cruise
			}, landing: function () {
				return o.a.landing
			}, normal_cruising_speed: function () {
				return o.a.normal_cruising_speed
			}, practical_range: function () {
				return o.a.practical_range
			}, fuel_consum_km: function () {
				return o.fuel_consum_km
			}
		}
	}), l = null, h = null, d = new Vue({
		el: ".section5-final",
		data: {
			flying_hours_per_month: r.flying_hours_per_month,
			flying_hour_profitability: t.flying_hour_profitability
		},
		methods: {
			inputChange: paramUpdate, inputFocus: inputFocus, flyingHoursChange: function (t) {
				r.flying_hours_per_month = $(t.target).val()
			}, statusColor: function (t) {
				return t <= 0 ? "negative" : "positive"
			}
		},
		computed: {
			lifetime: function () {
				return s.lifetime
			}, revenue_from_flight_hour: function () {
				return this.total_costs_hour / 100 * this.flying_hour_profitability
			}, total_flight_hour_cost: function () {
				return this.total_costs_hour + this.revenue_from_flight_hour
			}, forecasted_income_month: function () {
				return this.total_flight_hour_cost * r.flying_hours_per_month
			}, predicted_net_income_month: function () {
				return this.forecasted_income_month - this.total_costs_month
			}, amount_of_capital_costs: function () {
				return u.amount_of_capital_costs
			}, capital_costs_hour: function () {
				return this.capital_costs_month / r.flying_hours_per_month
			}, capital_costs_month: function () {
				return u.amount_of_capital_costs / s.lifetime / 12
			}, fixed_costs_year: function () {
				return _.grate_total_year
			}, fixed_costs_month: function () {
				return _.grate_total_year / 12
			}, fixed_costs_hour: function () {
				return _.grate_total_year / 12 / r.flying_hours_per_month
			}, variable_costs_hour: function () {
				return c.flight_hour_cost
			}, variable_costs_month: function () {
				return c.flight_hour_cost * r.flying_hours_per_month
			}, total_costs_hour: function () {
				return this.capital_costs_hour + this.fixed_costs_hour + this.variable_costs_hour
			}, total_costs_month: function () {
				return this.total_costs_hour * r.flying_hours_per_month
			}, total_costs: function () {
				return 12 * this.total_costs_month * this.lifetime
			}, table1Data: function () {
				var t = [], a = -this.total_costs, e = [a.toFixed(2)],
					n = this.total_costs_month + this.forecasted_income_month - this.total_costs_month;
				for (i = 0; i < 12 * this.lifetime; i++) a += n, t.push(a.toFixed(2));
				return changeChart(h, e.concat(t)), t
			}, table2Data: function () {
				var t = -this.total_costs.toFixed(2), a = [t], e = 12 * this.forecasted_income_month;
				for (i = 0; i < this.lifetime; i++) t += e, a.push(t.toFixed(2));
				return changeChart(l, a), a
			}
		}
	});
	Chart.defaults.global.defaultFontColor = "#fff", l = new Chart($("#chartYears"), {
		type: "bar",
		data: {
			labels: [],
			datasets: [{
				label: "Окупаемость",
				data: [],
				backgroundColor: "#1d1f2f",
				borderColor: "#20f2ad",
				borderWidth: 2,
				padding: 20
			}]
		},
		options: {
			title: {
				display: !0,
				text: "Окупаемость по годам",
				fontSize: 30,
				fontColor: "#20f2ad",
				fontStyle: "bold"
			}, legend: {display: !1}
		},
		plugins: [{
			beforeInit: function (t, a) {
				if (!t.data.labels.length) {
					var e = [];
					for (i = 0; i < d.table2Data.length; i++) e.push(i);
					t.data.labels = e, t.data.datasets[0].data = d.table2Data
				}
			}
		}]
	});
	h = new Chart($("#chartMonths"), {
		type: "bar",
		responsive: !0,
		data: {
			labels: [],
			datasets: [{
				label: "Окупаемость",
				data: [],
				backgroundColor: "#1d1f2f",
				borderColor: "#20f2ad",
				borderWidth: 2,
				padding: 20
			}]
		},
		options: {
			maintainAspectRatio: !1,
			title: {display: !0, text: "Окупаемость по месяцам", fontSize: 30, fontColor: "#20f2ad", fontStyle: "bold"},
			legend: {display: !1}
		},
		plugins: [{
			beforeInit: function (t, a) {
				if (!t.data.labels.length) {
					var e = [-d.total_costs.toFixed(2)];
					e = e.concat(d.table1Data);
					var n = [];
					for (i = 0; i < d.table1Data.length; i++) n.push(i);
					t.data.labels = n, t.data.datasets[0].data = e
				}
			}
		}]
	});
	$("#initData").remove(), $(".header__linkToPDF, .header__linkOpenPDF").click(function () {
		var t;
		$(".chartMonthsWrapper, .chartWrapper").addClass("toPDF"), $(this).is(".header__linkToPDF") ? t = "blob" : $(this).is(".header__linkOpenPDF") && (t = "save"), getPDF(t), $(".chartMonthsWrapper, .chartWrapper").removeClass("toPDF")
	})
	var tt = ""
	$(".aiplaneNameHeader").each(function () {
		if (tt == ""){
			tt = $(this).html()
		} else {
			$(this).html(tt)
		}
	})
});